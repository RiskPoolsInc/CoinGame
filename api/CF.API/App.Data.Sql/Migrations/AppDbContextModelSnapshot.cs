// <auto-generated />
using System;
using App.Data.Sql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace App.Data.Sql.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("App.Data.Entities.Attachments.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<byte[]>("FileBody")
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("ObjectTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ObjectId");

                    b.HasIndex("ObjectTypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Attachments");

                    b.HasDiscriminator<int>("ObjectTypeId");
                });

            modelBuilder.Entity("App.Data.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TaskTaskRequestId")
                        .HasColumnType("uuid");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TaskId");

                    b.HasIndex("TaskTaskRequestId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("App.Data.Entities.ChangeReasons.ChangeReason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TypeId");

                    b.ToTable("ChangeReasons");
                });

            modelBuilder.Entity("App.Data.Entities.ChatMessages.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatObjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("ChatObjectTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChatObjectTypeId");

                    b.HasIndex("CreatedById");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("App.Data.Entities.Commissions.TransactionCommission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("CoinsCount")
                        .HasColumnType("numeric");

                    b.Property<int?>("CoinsPercent")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TransactionPaymentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TransactionPaymentId");

                    b.ToTable("TransactionCommissions");
                });

            modelBuilder.Entity("App.Data.Entities.Companies.CustomerCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WalletId");

                    b.ToTable("CustomerCompany");
                });

            modelBuilder.Entity("App.Data.Entities.Companies.CustomerCompanyEndpoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerCompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("CustomerCompanyId");

                    b.HasIndex("TypeId");

                    b.ToTable("CustomerCompanyEndpoints");
                });

            modelBuilder.Entity("App.Data.Entities.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerCompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerCompanyId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.ApiEndpointType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApiEndpointTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.AttachmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AttachmentTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.AuditEventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AuditEventTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.BotCheckType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BotCheckTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.ChangeReasonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChangeReasonTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.ChatObjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChatObjectTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.FollowType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FollowTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.ObjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ObjectTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.ObjectValueType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ObjectValueTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.ReferralType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ReferralTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.RequiredAttachmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RequiredAttachmentTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.SettingPropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SettingPropertyTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.SettingPropertyValueType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SettingPropertyValueTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.TaskActionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TaskActionTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.TaskExecutionState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TaskExecutionStates");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.TaskExecutionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TaskExecutionStatuses");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.TaskStateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TaskStateTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.TaskTakeRequestState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TaskTakeRequestStates");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.TelegramMessageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TelegramMessageTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.UserLogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserLogType");
                });

            modelBuilder.Entity("App.Data.Entities.Dictionaries.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("App.Data.Entities.Notifications.Follow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uuid");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FollowerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Follows");

                    b.HasDiscriminator<int>("TypeId");
                });

            modelBuilder.Entity("App.Data.Entities.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("JsonObjectView")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RecipientId");

                    b.HasIndex("TypeId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("App.Data.Entities.Payments.BatchPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressTo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Sum")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("TransactionPaymentId")
                        .HasColumnType("uuid");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UbikiriUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BatchRequestsPayments");

                    b.HasDiscriminator<int>("TypeId");
                });

            modelBuilder.Entity("App.Data.Entities.Payments.ItemPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BatchPaymentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ItemPayments");

                    b.HasDiscriminator<int>("TypeId");
                });

            modelBuilder.Entity("App.Data.Entities.Payments.TransactionPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressFrom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CoinType")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("ExistInBlockChain")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Sum")
                        .HasColumnType("numeric");

                    b.Property<string>("TransactionHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TypeId");

                    b.ToTable("TransactionRequestsPayments");

                    b.HasDiscriminator<int>("TypeId");
                });

            modelBuilder.Entity("App.Data.Entities.PropertyHistories.PropertyHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChangeReasonId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Nullable")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("ObjectTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ObjectValueTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("integer");

                    b.Property<bool?>("ValueBoolean")
                        .HasColumnType("boolean");

                    b.Property<double?>("ValueDouble")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("ValueGuid")
                        .HasColumnType("uuid");

                    b.Property<int?>("ValueInt")
                        .HasColumnType("integer");

                    b.Property<string>("ValueString")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChangeReasonId");

                    b.HasIndex("ObjectTypeId");

                    b.HasIndex("ObjectValueTypeId");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("PropertyHistories");
                });

            modelBuilder.Entity("App.Data.Entities.Referal.ReferralPair", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressFrom")
                        .HasColumnType("text");

                    b.Property<string>("AddressTo")
                        .HasColumnType("text");

                    b.Property<decimal>("Award")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("AwardByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("AwardComplete")
                        .HasColumnType("boolean");

                    b.Property<string>("AwardHash")
                        .HasColumnType("text");

                    b.Property<int?>("CoinTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CustomerCompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("IP")
                        .HasColumnType("text");

                    b.Property<Guid?>("IdentityUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InvitedByIdentityUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InvitedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("JsonData")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AwardByUserId");

                    b.HasIndex("CustomerCompanyId");

                    b.HasIndex("InvitedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("ReferralPairs");
                });

            modelBuilder.Entity("App.Data.Entities.Settings.SettingProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("ValueBoolean")
                        .HasColumnType("boolean");

                    b.Property<int?>("ValueNumber")
                        .HasColumnType("integer");

                    b.Property<double?>("ValueNumberDouble")
                        .HasColumnType("double precision");

                    b.Property<string>("ValueText")
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.Property<int>("ValueTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("ValueTypeId");

                    b.ToTable("SettingProperties");
                });

            modelBuilder.Entity("App.Data.Entities.TaskExecutions.TaskExecution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.HasIndex("WalletId");

                    b.ToTable("TaskExecutions");
                });

            modelBuilder.Entity("App.Data.Entities.TaskExecutions.TaskExecutionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TaskExecutionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TaskExecutionId");

                    b.ToTable("TaskExecutionHistory");
                });

            modelBuilder.Entity("App.Data.Entities.TaskExecutions.TaskExecutionNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid[]>("AttachmentIds")
                        .HasColumnType("uuid[]");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("character varying(1500)")
                        .HasMaxLength(1500);

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TaskExecutionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TaskExecutionId");

                    b.ToTable("TaskExecutionNotes");
                });

            modelBuilder.Entity("App.Data.Entities.TaskTakeRequests.TaskTakeRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("TaskTakeRequests");
                });

            modelBuilder.Entity("App.Data.Entities.Tasks.RequiredAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("TypeId");

                    b.ToTable("RequiredAttachments");
                });

            modelBuilder.Entity("App.Data.Entities.Tasks.TaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid[]>("AttachmentIds")
                        .HasColumnType("uuid[]");

                    b.Property<decimal>("Award")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExternalLink")
                        .HasColumnType("text");

                    b.Property<long>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScriptGenerated")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TaskStateId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.HasIndex("TaskStateId");

                    b.HasIndex("TypeId");

                    b.HasIndex("WalletId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("App.Data.Entities.Tasks.TaskHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("TargetId")
                        .HasColumnType("uuid");

                    b.Property<int>("TaskActionId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TaskActionId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskHistories");
                });

            modelBuilder.Entity("App.Data.Entities.Tasks.TaskNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskNotes");
                });

            modelBuilder.Entity("App.Data.Entities.Tasks.TaskStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid[]>("AttachmentIds")
                        .HasColumnType("uuid[]");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskSteps");
                });

            modelBuilder.Entity("App.Data.Entities.TelegramMessages.TelegramMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChatId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("JsonValue")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Sender")
                        .HasColumnType("text");

                    b.Property<bool>("SentSuccessful")
                        .HasColumnType("boolean");

                    b.Property<long?>("TelegramUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TypeId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("TelegramMessages");

                    b.HasDiscriminator<int?>("TypeId");
                });

            modelBuilder.Entity("App.Data.Entities.UserLogs.UserLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<decimal?>("CaptchaScore")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("IP")
                        .HasColumnType("text");

                    b.Property<string>("MAC")
                        .HasColumnType("text");

                    b.Property<Guid?>("ReferralId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReferralIdText")
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UbikiriUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserByReferralId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReferralId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserByReferralId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogs");
                });

            modelBuilder.Entity("App.Data.Entities.UserProfiles.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BotCheckReasons")
                        .HasColumnType("text");

                    b.Property<int?>("BotCheckTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LinkedWallet")
                        .HasColumnType("text");

                    b.Property<Guid?>("ReferralId")
                        .HasColumnType("uuid");

                    b.Property<int>("ReferralTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("RegistrationComplete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("RegistrationTaskRequestId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("TelegramChangeLock")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("TelegramConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("TelegramId")
                        .HasColumnType("text");

                    b.Property<long?>("TelegramUserId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TelegramVerificationCodeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("TwitterChangeLock")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("TwitterConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("TwitterId")
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UbikiriUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BotCheckTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ReferralTypeId");

                    b.HasIndex("RegistrationTaskRequestId");

                    b.HasIndex("TelegramVerificationCodeId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UbikiriUserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("App.Data.Entities.Verification.VerificationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExpirationTime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Value");

                    b.ToTable("VerificationCodes");
                });

            modelBuilder.Entity("App.Data.Entities.Wallets.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("WalletCrowfeeding");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("App.Data.Entities.Attachments.AuditLogAttachment", b =>
                {
                    b.HasBaseType("App.Data.Entities.Attachments.Attachment");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("App.Data.Entities.Attachments.TaskAttachment", b =>
                {
                    b.HasBaseType("App.Data.Entities.Attachments.Attachment");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("App.Data.Entities.Attachments.TaskExecutionNoteAttachment", b =>
                {
                    b.HasBaseType("App.Data.Entities.Attachments.Attachment");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("App.Data.Entities.Notifications.CustomerFollow", b =>
                {
                    b.HasBaseType("App.Data.Entities.Notifications.Follow");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.HasIndex("CustomerId");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("App.Data.Entities.Notifications.ReferralPairFollow", b =>
                {
                    b.HasBaseType("App.Data.Entities.Notifications.Follow");

                    b.Property<Guid>("ReferralPairId")
                        .HasColumnType("uuid");

                    b.HasIndex("ReferralPairId");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("App.Data.Entities.Notifications.TaskFollow", b =>
                {
                    b.HasBaseType("App.Data.Entities.Notifications.Follow");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasIndex("TaskId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("App.Data.Entities.Notifications.TaskRequestFollow", b =>
                {
                    b.HasBaseType("App.Data.Entities.Notifications.Follow");

                    b.Property<Guid>("TaskRequestId")
                        .HasColumnType("uuid");

                    b.HasIndex("TaskRequestId");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("App.Data.Entities.Notifications.UserFollow", b =>
                {
                    b.HasBaseType("App.Data.Entities.Notifications.Follow");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("App.Data.Entities.Payments.ReferralPayments.BatchReferralPairPayment", b =>
                {
                    b.HasBaseType("App.Data.Entities.Payments.BatchPayment");

                    b.HasIndex("TransactionPaymentId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("App.Data.Entities.Payments.TaskRequests.BatchTaskRequestsPayment", b =>
                {
                    b.HasBaseType("App.Data.Entities.Payments.BatchPayment");

                    b.HasIndex("TransactionPaymentId")
                        .HasName("IX_BatchRequestsPayments_TransactionPaymentId1");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("App.Data.Entities.Payments.ReferralPayments.ReferralPairPayment", b =>
                {
                    b.HasBaseType("App.Data.Entities.Payments.ItemPayment");

                    b.Property<Guid?>("ReferralPairId")
                        .HasColumnType("uuid");

                    b.HasIndex("BatchPaymentId");

                    b.HasIndex("ReferralPairId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("App.Data.Entities.Payments.TaskRequests.TaskRequestPayment", b =>
                {
                    b.HasBaseType("App.Data.Entities.Payments.ItemPayment");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid");

                    b.HasIndex("BatchPaymentId")
                        .HasName("IX_ItemPayments_BatchPaymentId1");

                    b.HasIndex("RequestId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("App.Data.Entities.Payments.ReferralPayments.TransactionReferralPairPayment", b =>
                {
                    b.HasBaseType("App.Data.Entities.Payments.TransactionPayment");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("App.Data.Entities.Payments.TaskRequests.TransactionTaskRequestPayment", b =>
                {
                    b.HasBaseType("App.Data.Entities.Payments.TransactionPayment");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("App.Data.Entities.TelegramMessages.ExternalTelegramMessage", b =>
                {
                    b.HasBaseType("App.Data.Entities.TelegramMessages.TelegramMessage");

                    b.HasIndex("UserProfileId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("App.Data.Entities.TelegramMessages.TaskTelegramMessage", b =>
                {
                    b.HasBaseType("App.Data.Entities.TelegramMessages.TelegramMessage");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid");

                    b.HasIndex("TaskId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("App.Data.Entities.Attachments.Attachment", b =>
                {
                    b.HasOne("App.Data.Entities.Companies.CustomerCompany", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Data.Entities.Dictionaries.ObjectType", "ObjectType")
                        .WithMany()
                        .HasForeignKey("ObjectTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.Dictionaries.AttachmentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.AuditLog", b =>
                {
                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Data.Entities.Tasks.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.HasOne("App.Data.Entities.TaskTakeRequests.TaskTakeRequest", "TaskTaskRequest")
                        .WithMany()
                        .HasForeignKey("TaskTaskRequestId");

                    b.HasOne("App.Data.Entities.Dictionaries.AuditEventType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("App.Data.Entities.ChangeReasons.ChangeReason", b =>
                {
                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Data.Entities.Dictionaries.ChangeReasonType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("App.Data.Entities.ChatMessages.ChatMessage", b =>
                {
                    b.HasOne("App.Data.Entities.Dictionaries.ChatObjectType", "ChatObjectType")
                        .WithMany()
                        .HasForeignKey("ChatObjectTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.Commissions.TransactionCommission", b =>
                {
                    b.HasOne("App.Data.Entities.Payments.TransactionPayment", "TransactionPayment")
                        .WithMany("TransactionCommissions")
                        .HasForeignKey("TransactionPaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.Companies.CustomerCompany", b =>
                {
                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Data.Entities.Wallets.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Data.Entities.Companies.CustomerCompanyEndpoint", b =>
                {
                    b.HasOne("App.Data.Entities.Companies.CustomerCompany", "CustomerCompany")
                        .WithMany()
                        .HasForeignKey("CustomerCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.Dictionaries.ApiEndpointType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.Customers.Customer", b =>
                {
                    b.HasOne("App.Data.Entities.Companies.CustomerCompany", "CustomerCompany")
                        .WithMany()
                        .HasForeignKey("CustomerCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.Notifications.Follow", b =>
                {
                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "Follower")
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.Dictionaries.FollowType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.Notifications.Notification", b =>
                {
                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.Dictionaries.AuditEventType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.Payments.BatchPayment", b =>
                {
                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "User")
                        .WithMany("BatchPayments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("App.Data.Entities.Payments.TransactionPayment", b =>
                {
                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "CreatedBy")
                        .WithMany("TransactionPayments")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.Dictionaries.PaymentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.PropertyHistories.PropertyHistory", b =>
                {
                    b.HasOne("App.Data.Entities.ChangeReasons.ChangeReason", "ChangeReason")
                        .WithMany()
                        .HasForeignKey("ChangeReasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Data.Entities.Dictionaries.ObjectType", "ObjectType")
                        .WithMany()
                        .HasForeignKey("ObjectTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.Dictionaries.ObjectValueType", "ObjectValueType")
                        .WithMany()
                        .HasForeignKey("ObjectValueTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.Dictionaries.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.Referal.ReferralPair", b =>
                {
                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "AwardBy")
                        .WithMany()
                        .HasForeignKey("AwardByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Data.Entities.Companies.CustomerCompany", "CustomerCompany")
                        .WithMany()
                        .HasForeignKey("CustomerCompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "InvitedByUser")
                        .WithMany("InvitedReferralPairs")
                        .HasForeignKey("InvitedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "User")
                        .WithMany("ReferralPairs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("App.Data.Entities.Settings.SettingProperty", b =>
                {
                    b.HasOne("App.Data.Entities.Dictionaries.SettingPropertyType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.Dictionaries.SettingPropertyValueType", "ValueType")
                        .WithMany()
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.TaskExecutions.TaskExecution", b =>
                {
                    b.HasOne("App.Data.Entities.Dictionaries.TaskExecutionState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.Dictionaries.TaskExecutionStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.Tasks.TaskEntity", "Task")
                        .WithMany("TaskExecutions")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "User")
                        .WithMany("TaskExecutions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Data.Entities.Wallets.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("App.Data.Entities.TaskExecutions.TaskExecutionHistory", b =>
                {
                    b.HasOne("App.Data.Entities.Dictionaries.TaskExecutionState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.Dictionaries.TaskExecutionStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.TaskExecutions.TaskExecution", "TaskExecution")
                        .WithMany("History")
                        .HasForeignKey("TaskExecutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.TaskExecutions.TaskExecutionNote", b =>
                {
                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.TaskExecutions.TaskExecution", "TaskExecution")
                        .WithMany("Notes")
                        .HasForeignKey("TaskExecutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.TaskTakeRequests.TaskTakeRequest", b =>
                {
                    b.HasOne("App.Data.Entities.Dictionaries.TaskTakeRequestState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.Tasks.TaskEntity", "Task")
                        .WithMany("TaskTakeRequests")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "UserProfile")
                        .WithMany("TaskTakeRequest")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.Tasks.RequiredAttachment", b =>
                {
                    b.HasOne("App.Data.Entities.Tasks.TaskEntity", "Task")
                        .WithMany("RequiredAttachments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.Dictionaries.RequiredAttachmentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.Tasks.TaskEntity", b =>
                {
                    b.HasOne("App.Data.Entities.Companies.CustomerCompany", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Data.Entities.Dictionaries.TaskStateType", "State")
                        .WithMany()
                        .HasForeignKey("TaskStateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.Dictionaries.TaskType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.Wallets.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("App.Data.Entities.Tasks.TaskHistory", b =>
                {
                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.Dictionaries.TaskActionType", "ActionType")
                        .WithMany()
                        .HasForeignKey("TaskActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.Tasks.TaskEntity", "Task")
                        .WithMany("Histories")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.Tasks.TaskNote", b =>
                {
                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.Tasks.TaskEntity", "Task")
                        .WithMany("Notes")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.Tasks.TaskStep", b =>
                {
                    b.HasOne("App.Data.Entities.Tasks.TaskEntity", "Task")
                        .WithMany("TaskSteps")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.TelegramMessages.TelegramMessage", b =>
                {
                    b.HasOne("App.Data.Entities.Dictionaries.TelegramMessageType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.UserLogs.UserLog", b =>
                {
                    b.HasOne("App.Data.Entities.Dictionaries.UserLogType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "UserByReferral")
                        .WithMany()
                        .HasForeignKey("UserByReferralId");

                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("App.Data.Entities.UserProfiles.UserProfile", b =>
                {
                    b.HasOne("App.Data.Entities.Dictionaries.BotCheckType", "BotCheckType")
                        .WithMany()
                        .HasForeignKey("BotCheckTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Data.Entities.Companies.CustomerCompany", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Data.Entities.Dictionaries.ReferralType", "ReferralType")
                        .WithMany()
                        .HasForeignKey("ReferralTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Entities.TaskTakeRequests.TaskTakeRequest", "RegistrationTaskRequest")
                        .WithMany()
                        .HasForeignKey("RegistrationTaskRequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Data.Entities.Verification.VerificationCode", "TelegramVerificationCode")
                        .WithMany()
                        .HasForeignKey("TelegramVerificationCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Data.Entities.Dictionaries.UserType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.Wallets.Wallet", b =>
                {
                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("App.Data.Entities.Notifications.CustomerFollow", b =>
                {
                    b.HasOne("App.Data.Entities.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.Notifications.ReferralPairFollow", b =>
                {
                    b.HasOne("App.Data.Entities.Referal.ReferralPair", "ReferralPair")
                        .WithMany()
                        .HasForeignKey("ReferralPairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.Notifications.TaskFollow", b =>
                {
                    b.HasOne("App.Data.Entities.Tasks.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.Notifications.TaskRequestFollow", b =>
                {
                    b.HasOne("App.Data.Entities.TaskTakeRequests.TaskTakeRequest", "TaskRequest")
                        .WithMany()
                        .HasForeignKey("TaskRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.Notifications.UserFollow", b =>
                {
                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Entities.Payments.ReferralPayments.BatchReferralPairPayment", b =>
                {
                    b.HasOne("App.Data.Entities.Payments.ReferralPayments.TransactionReferralPairPayment", "TransactionReferralPairPayment")
                        .WithMany("BatchPayments")
                        .HasForeignKey("TransactionPaymentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("App.Data.Entities.Payments.TaskRequests.BatchTaskRequestsPayment", b =>
                {
                    b.HasOne("App.Data.Entities.Payments.TaskRequests.TransactionTaskRequestPayment", "TransactionTaskRequestPayment")
                        .WithMany("BatchPayments")
                        .HasForeignKey("TransactionPaymentId")
                        .HasConstraintName("FK_BatchRequestsPayments_TransactionRequestsPayments_Transact~1")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("App.Data.Entities.Payments.ReferralPayments.ReferralPairPayment", b =>
                {
                    b.HasOne("App.Data.Entities.Payments.ReferralPayments.BatchReferralPairPayment", "BatchReferralPairPayment")
                        .WithMany("ReferralPairPayments")
                        .HasForeignKey("BatchPaymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Data.Entities.Referal.ReferralPair", "ReferralPair")
                        .WithMany()
                        .HasForeignKey("ReferralPairId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("App.Data.Entities.Payments.TaskRequests.TaskRequestPayment", b =>
                {
                    b.HasOne("App.Data.Entities.Payments.TaskRequests.BatchTaskRequestsPayment", "BatchRequestsPayment")
                        .WithMany("TaskRequestPayments")
                        .HasForeignKey("BatchPaymentId")
                        .HasConstraintName("FK_ItemPayments_BatchRequestsPayments_BatchPaymentId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Data.Entities.TaskTakeRequests.TaskTakeRequest", "TaskRequest")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("App.Data.Entities.TelegramMessages.ExternalTelegramMessage", b =>
                {
                    b.HasOne("App.Data.Entities.UserProfiles.UserProfile", null)
                        .WithMany("TelegramMessages")
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("App.Data.Entities.TelegramMessages.TaskTelegramMessage", b =>
                {
                    b.HasOne("App.Data.Entities.Tasks.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
