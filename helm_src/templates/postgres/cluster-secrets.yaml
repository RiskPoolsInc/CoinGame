apiVersion: v1 
kind: Secret
metadata: 
{{ with .Values.postgres }}
  name: managed-postgres-cluster.env # The name must be same as configured in the values file earlier
stringData: 
{{ if .workaroundSSLDisable }}
  PGSSLMODE: "prefer"
  ALLOW_NOSSL: "true"
{{ end }}
  BACKUP_SCHEDULE: "{{ .backup.schedule }}" # Schedule a base backup every 12 hours; you can customise as you wish
  USE_WALG_BACKUP: "true" # Use the golang backup tool (faster) 
  BACKUP_NUM_TO_RETAIN: "{{ .backup.retain }}" # For 2 backups per day, keep 7 days of base backups
  AWS_ACCESS_KEY_ID: "{{ .backup.s3.accessKey }}"
  AWS_SECRET_ACCESS_KEY: "{{ .backup.s3.secretKey }}"
  AWS_ENDPOINT: "{{ .backup.s3.endpoint }}"
  AWS_REGION: "{{ .backup.s3.region }}"
  WALG_S3_PREFIX: "{{ .backup.s3.bucket }}"
  AWS_S3_FORCE_PATH_STYLE: "{{ default "true" .backup.s3.forcePathStyle }}"
  WALG_DISABLE_S3_SSE: "true"


#####################
## RESTORE SECTION ##
#####################
{{ if .restore.enable }}
  USE_WALG_RESTORE: "true" 
  CLONE_METHOD: CLONE_WITH_WALE
  CLONE_AWS_ACCESS_KEY_ID: "{{ .restore.s3.accessKey }}"
  CLONE_AWS_SECRET_ACCESS_KEY: "{{ .restore.s3.secretKey }}"
  CLONE_AWS_ENDPOINT: "{{ .restore.s3.endpoint }}"
  CLONE_AWS_REGION: "{{ .restore.s3.region }}"
  CLONE_WAL_S3_BUCKET: "{{ .restore.s3.bucket }}"
  CLONE_WAL_BUCKET_SCOPE_SUFFIX: "/{{ .restore.sourceClusterUID }}"
  CLONE_TARGET_TIME: "{{ .restore.recoveryTimePoint }}"  # time in the WAL archive that we want to restore
  CLONE_SCOPE: "{{ .restore.sourceClusterName }}"  # name of the original cluster
{{ end }}
{{ end }}
